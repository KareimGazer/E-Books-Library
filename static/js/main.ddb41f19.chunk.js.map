{"version":3,"sources":["BooksAPI.js","Book.js","Shelf.js","Library.js","SearchButton.js","Header.js","SearchPage.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","get","bookId","fetch","concat","then","res","json","data","book","getAll","books","search","query","method","Object","objectSpread","Content-Type","body","JSON","stringify","Book","_this","this","react_default","a","createElement","className","style","width","height","backgroundImage","props","coverUrl","value","shelf","onChange","event","id","target","updateBook","disabled","title","authors","map","author","key","indexOf","Component","prototypes","propTypes","string","isRequired","array","func","Shelf","booksList","src_Book","imageLinks","smallThumbnail","Library","shelves","src_Shelf","SearchButton","react_router_dom","to","Header","SearchPage","state","booksDictionary","searchBooks","bookName","BooksAPI","Array","isArray","setState","catch","console","log","booksDict","getBooksMap","_this2","type","placeholder","addBook","BooksApp","categories","allBooks","setUpShelves","currentState","filter","getNewBooks","bList","i","length","push","react_router","exact","path","render","src_Header","src_Library","src_SearchButton","src_SearchPage","React","ReactDOM","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.ddb41f19.chunk.js","sourcesContent":["const api = \"https://reactnd-books-api.udacity.com\";\r\n\r\n// Generate a unique token for storing your bookshelf data on the backend server.\r\nlet token = localStorage.token;\r\nif (!token)\r\n  token = localStorage.token = Math.random()\r\n    .toString(36)\r\n    .substr(-8);\r\n\r\nconst headers = {\r\n  Accept: \"application/json\",\r\n  Authorization: token,\r\n};\r\n\r\nexport const get = (bookId) =>\r\n  fetch(`${api}/books/${bookId}`, { headers })\r\n    .then((res) => res.json())\r\n    .then((data) => data.book);\r\n\r\nexport const getAll = () =>\r\n  fetch(`${api}/books`, { headers })\r\n    .then((res) => res.json())\r\n    .then((data) => data.books);\r\n\r\nexport const update = (book, shelf) =>\r\n  fetch(`${api}/books/${book.id}`, {\r\n    method: \"PUT\",\r\n    headers: {\r\n      ...headers,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({ shelf }),\r\n  }).then((res) => res.json());\r\n\r\nexport const search = (query) =>\r\n  fetch(`${api}/search`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      ...headers,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({ query }),\r\n  })\r\n    .then((res) => res.json())\r\n    .then((data) => data.books);\r\n","/*\r\n  The Component responsible for displaying the book info\r\n*/\r\nimport React, { Component } from \"react\";\r\nimport propTypes from \"prop-types\";\r\nimport * as BooksAPI from \"./BooksAPI\";\r\n\r\nclass Book extends Component {\r\n  static prototypes = {\r\n    coverUrl: propTypes.string.isRequired,\r\n    title: propTypes.string.isRequired,\r\n    authors: propTypes.array.isRequired,\r\n    id: propTypes.string.isRequired,\r\n    updateBook: propTypes.func.isRequired,\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"book\">\r\n        <div className=\"book-top\">\r\n          <div\r\n            className=\"book-cover\"\r\n            style={{\r\n              width: 128,\r\n              height: 190,\r\n              backgroundImage: `url(${this.props.coverUrl})`,\r\n            }}\r\n          />\r\n          <div className=\"book-shelf-changer\">\r\n            <select\r\n              value={this.props.shelf}\r\n              onChange={(event) => {\r\n                BooksAPI.update(\r\n                  { id: this.props.id, shelf: this.props.shelf },\r\n                  event.target.value\r\n                );\r\n                this.props.updateBook(this.props.id, event.target.value);\r\n              }}\r\n            >\r\n              <option value=\"move\" disabled>\r\n                Move to...\r\n              </option>\r\n              <option value=\"currentlyReading\">Currently Reading</option>\r\n              <option value=\"wantToRead\">Want to Read</option>\r\n              <option value=\"read\">Read</option>\r\n              <option value=\"none\">None</option>\r\n            </select>\r\n          </div>\r\n        </div>\r\n        <div className=\"book-title\">{this.props.title}</div>\r\n        <div className=\"book-authors\">\r\n          {this.props.authors != null &&\r\n            this.props.authors.map((author) => (\r\n              <div key={this.props.authors.indexOf(author)}>{author}</div>\r\n            ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Book;\r\n","/*\r\n  This component is responsible for containing the books of each shelve \r\n*/\r\n\r\nimport React, { Component } from \"react\";\r\nimport Book from \"./Book\";\r\nimport propTypes from \"prop-types\";\r\n\r\nclass Shelf extends Component {\r\n  static prototypes = {\r\n    key: propTypes.string.isRequired,\r\n    shelf: propTypes.string.isRequired,\r\n    booksList: propTypes.array.isRequired,\r\n    updateBook: propTypes.func.isRequired,\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"bookshelf\">\r\n        <h2 className=\"bookshelf-title\">{this.props.shelf}</h2>\r\n        <div className=\"bookshelf-books\">\r\n          <ol className=\"books-grid\">\r\n            {this.props.booksList.map((book) => (\r\n              <li key={book.id}>\r\n                <Book\r\n                  coverUrl={\r\n                    book.imageLinks != null\r\n                      ? book.imageLinks.smallThumbnail\r\n                      : \"\"\r\n                  }\r\n                  title={book.title}\r\n                  authors={book.authors}\r\n                  id={book.id}\r\n                  shelf={book.shelf}\r\n                  updateBook={this.props.updateBook}\r\n                />\r\n              </li>\r\n            ))}\r\n          </ol>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Shelf;\r\n","/*\r\n  This Component is responsible for containg the library shelves\r\n  It takes list of shelves, where each shelve has a category and booksList props\r\n*/\r\n\r\nimport React, { Component } from \"react\";\r\nimport Shelf from \"./Shelf\";\r\nimport propTypes from \"prop-types\";\r\n\r\nclass Library extends Component {\r\n  static prototypes = {\r\n    updateBook: propTypes.func.isRequired,\r\n    shelves: propTypes.array.isRequired,\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"list-books-content\">\r\n        <div>\r\n          {this.props.shelves.map((shelf) => (\r\n            <Shelf\r\n              key={shelf.id}\r\n              shelf={shelf.shelf}\r\n              booksList={shelf.booksList}\r\n              updateBook={this.props.updateBook}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Library;\r\n","/*\r\n  This component is responsible for moving to search page\r\n*/\r\nimport React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass SearchButton extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"open-search\">\r\n        <Link to=\"/search\" className=\"open-search-link\">\r\n          Add a book\r\n        </Link>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchButton;\r\n","/*\r\n  This component is responsible for page Heading\r\n*/\r\n\r\nimport React, { Component } from \"react\";\r\n\r\nclass Header extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"list-books-title\">\r\n        <h1>MyReads</h1>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","/*\r\n  This component is responsible for containing the books of each shelve \r\n*/\r\n\r\nimport React, { Component } from \"react\";\r\nimport Book from \"./Book\";\r\nimport propTypes, { bool } from \"prop-types\";\r\nimport * as BooksAPI from \"./BooksAPI\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass SearchPage extends Component {\r\n  static prototypes = {\r\n    addBook: propTypes.func.isRequired,\r\n  };\r\n\r\n  state = {\r\n    booksList: [],\r\n    query: \"\",\r\n    booksDictionary: {},\r\n  };\r\n\r\n  //componentDidMount() {}\r\n  searchBooks = (bookName) => {\r\n    if (bookName !== \"\") {\r\n      BooksAPI.search(bookName)\r\n        .then((books) => {\r\n          if (Array.isArray(books)) {\r\n            this.setState({\r\n              booksList: books,\r\n            });\r\n          } else {\r\n            this.setState({\r\n              booksList: [],\r\n            });\r\n          }\r\n        })\r\n        .catch(() => {\r\n          console.log(\"rejected\");\r\n        });\r\n    } else {\r\n      this.setState({\r\n        booksList: [],\r\n      });\r\n    }\r\n    const booksDict = this.props.getBooksMap();\r\n    this.setState({ booksDictionary: booksDict });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"search-books\">\r\n        <div className=\"search-books-bar\">\r\n          <Link className=\"close-search\" to=\"/\">\r\n            Close\r\n          </Link>\r\n          <div className=\"search-books-input-wrapper\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Search by title or author\"\r\n              value={this.state.query}\r\n              onChange={(event) => {\r\n                this.setState({\r\n                  query: event.target.value,\r\n                });\r\n                this.searchBooks(event.target.value);\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"search-books-results\">\r\n          <ol className=\"books-grid\">\r\n            {console.log(this.state.booksList)}\r\n            {this.state.booksList.map((book) => (\r\n              <li key={book.id}>\r\n                <Book\r\n                  coverUrl={\r\n                    book.imageLinks != null\r\n                      ? book.imageLinks.smallThumbnail\r\n                      : \"\"\r\n                  }\r\n                  title={book.title}\r\n                  authors={book.authors}\r\n                  id={book.id}\r\n                  shelf={\r\n                    this.state.booksDictionary[book.id]\r\n                      ? this.state.booksDictionary[book.id]\r\n                      : \"none\"\r\n                  }\r\n                  updateBook={this.props.addBook}\r\n                />\r\n              </li>\r\n            ))}\r\n          </ol>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchPage;\r\n","import React from \"react\";\r\nimport Library from \"./Library\";\r\nimport * as BooksAPI from \"./BooksAPI\";\r\nimport \"./App.css\";\r\nimport SearchButton from \"./SearchButton\";\r\nimport Header from \"./Header\";\r\nimport SearchPage from \"./SearchPage\";\r\nimport { Route } from \"react-router-dom\";\r\n\r\nclass BooksApp extends React.Component {\r\n  state = {\r\n    shelves: [],\r\n    categories: [\"Currently Reading\", \"Want to Read\", \"Read\"],\r\n    allBooks: [],\r\n  };\r\n\r\n  // filters books into appropriate shelves\r\n  setUpShelves = () => {\r\n    this.setState((currentState) => ({\r\n      shelves: [\r\n        {\r\n          id: 0,\r\n          shelf: \"Currently Reading\",\r\n          booksList: currentState.allBooks.filter(\r\n            (book) => book.shelf === \"currentlyReading\"\r\n          ),\r\n        },\r\n        {\r\n          id: 1,\r\n          shelf: \"Want to Read\",\r\n          booksList: currentState.allBooks.filter(\r\n            (book) => book.shelf === \"wantToRead\"\r\n          ),\r\n        },\r\n        {\r\n          id: 2,\r\n          shelf: \"Read\",\r\n          booksList: currentState.allBooks.filter(\r\n            (book) => book.shelf === \"read\"\r\n          ),\r\n        },\r\n      ],\r\n    }));\r\n  };\r\n\r\n  // returns a map of books id and their shelf to help show that in the search page\r\n  getBooksMap = () => {\r\n    let booksDictionary = {};\r\n    this.state.allBooks.map((book) => (booksDictionary[book.id] = book.shelf));\r\n    return booksDictionary;\r\n  };\r\n\r\n  //loads books from udacity API\r\n  getNewBooks = () => {\r\n    BooksAPI.getAll().then((books) => {\r\n      this.setState({\r\n        allBooks: books,\r\n      });\r\n      this.setUpShelves();\r\n    });\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getNewBooks();\r\n  }\r\n\r\n  // updates the book info (state.allBooks) in the App component\r\n  updateBook = (id, shelf) => {\r\n    this.setState((currentState) => {\r\n      var bList = currentState.allBooks;\r\n      for (var i = 0; i < bList.length; i++) {\r\n        if (bList[i].id === id) {\r\n          bList[i].shelf = shelf;\r\n        }\r\n      }\r\n      return { allBooks: bList };\r\n    });\r\n    this.setUpShelves();\r\n  };\r\n\r\n  // add a book from search page to the main list of books\r\n  addBook = (id, shelf) => {\r\n    BooksAPI.get(id).then((book) => {\r\n      this.setState((currentState) => {\r\n        let booksList = currentState.allBooks;\r\n        book.shelf = shelf;\r\n        booksList.push(book);\r\n        return { allBooks: booksList };\r\n      });\r\n      this.setUpShelves();\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"app\">\r\n        <Route\r\n          exact\r\n          path=\"/\"\r\n          render={() => (\r\n            <div className=\"list-books\">\r\n              <Header />\r\n              <Library\r\n                shelves={this.state.shelves}\r\n                updateBook={this.updateBook}\r\n              />\r\n              <SearchButton />\r\n            </div>\r\n          )}\r\n        />\r\n        <Route\r\n          exact\r\n          path=\"/search\"\r\n          render={() => (\r\n            <SearchPage addBook={this.addBook} getBooksMap={this.getBooksMap} />\r\n          )}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BooksApp;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}